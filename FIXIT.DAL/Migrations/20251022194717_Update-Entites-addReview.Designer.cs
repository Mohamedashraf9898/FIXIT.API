// <auto-generated />
using System;
using FIXIT.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FIXIT.DAL.Migrations
{
    [DbContext(typeof(FixItDbContext))]
    [Migration("20251022194717_Update-Entites-addReview")]
    partial class UpdateEntitesaddReview
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FIXIT.DAL.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalRequests")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("FIXIT.DAL.Models.CraftsMan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Describtion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar");

                    b.Property<int>("ExperienceOfYears")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("money");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CraftsMen", (string)null);
                });

            modelBuilder.Entity("FIXIT.DAL.Models.CraftsManService", b =>
                {
                    b.Property<int>("CraftsManId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("money");

                    b.HasKey("CraftsManId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CraftsMenServices", (string)null);
                });

            modelBuilder.Entity("FIXIT.DAL.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CraftsManId")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServicesRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CraftsManId");

                    b.HasIndex("ServicesRequestId")
                        .IsUnique();

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("FIXIT.DAL.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<decimal>("InitialPrice")
                        .HasColumnType("money");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("FIXIT.DAL.Models.ServicesRequest", b =>
                {
                    b.Property<int>("ServicesRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicesRequestId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CraftsManId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ServicesRequestId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CraftsManId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesRequests", (string)null);
                });

            modelBuilder.Entity("FIXIT.DAL.Models.CraftsManService", b =>
                {
                    b.HasOne("FIXIT.DAL.Models.CraftsMan", "CraftsMan")
                        .WithMany("CraftsManServices")
                        .HasForeignKey("CraftsManId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FIXIT.DAL.Models.Service", "Service")
                        .WithMany("CraftsManServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CraftsMan");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FIXIT.DAL.Models.Review", b =>
                {
                    b.HasOne("FIXIT.DAL.Models.Client", "Client")
                        .WithMany("Reviews")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FIXIT.DAL.Models.CraftsMan", "CraftsMan")
                        .WithMany("Reviews")
                        .HasForeignKey("CraftsManId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FIXIT.DAL.Models.ServicesRequest", "ServicesRequest")
                        .WithOne("Review")
                        .HasForeignKey("FIXIT.DAL.Models.Review", "ServicesRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");

                    b.Navigation("CraftsMan");

                    b.Navigation("ServicesRequest");
                });

            modelBuilder.Entity("FIXIT.DAL.Models.ServicesRequest", b =>
                {
                    b.HasOne("FIXIT.DAL.Models.Client", "Client")
                        .WithMany("ServicesRequest")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FIXIT.DAL.Models.CraftsMan", "CraftsMan")
                        .WithMany("ServicesRequests")
                        .HasForeignKey("CraftsManId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FIXIT.DAL.Models.Service", "Service")
                        .WithMany("ServicesRequests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("CraftsMan");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FIXIT.DAL.Models.Client", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("ServicesRequest");
                });

            modelBuilder.Entity("FIXIT.DAL.Models.CraftsMan", b =>
                {
                    b.Navigation("CraftsManServices");

                    b.Navigation("Reviews");

                    b.Navigation("ServicesRequests");
                });

            modelBuilder.Entity("FIXIT.DAL.Models.Service", b =>
                {
                    b.Navigation("CraftsManServices");

                    b.Navigation("ServicesRequests");
                });

            modelBuilder.Entity("FIXIT.DAL.Models.ServicesRequest", b =>
                {
                    b.Navigation("Review");
                });
#pragma warning restore 612, 618
        }
    }
}
